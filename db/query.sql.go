// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const getBook = `-- name: GetBook :one
SELECT id, title, author, volume, edition, publisher, year FROM books WHERE id = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Volume,
		&i.Edition,
		&i.Publisher,
		&i.Year,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, volume, edition, publisher, year FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Volume,
			&i.Edition,
			&i.Publisher,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChapter = `-- name: GetChapter :one
SELECT id, book_id, number, name FROM chapters WHERE id = ? LIMIT 1
`

func (q *Queries) GetChapter(ctx context.Context, id int64) (Chapter, error) {
	row := q.db.QueryRowContext(ctx, getChapter, id)
	var i Chapter
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Number,
		&i.Name,
	)
	return i, err
}

const getChapterIDs = `-- name: GetChapterIDs :many
SELECT id FROM chapters WHERE book_id = ?
`

func (q *Queries) GetChapterIDs(ctx context.Context, bookID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getChapterIDs, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChapters = `-- name: GetChapters :many
SELECT id, book_id, number, name FROM chapters
WHERE book_id = ?
`

func (q *Queries) GetChapters(ctx context.Context, bookID int64) ([]Chapter, error) {
	rows, err := q.db.QueryContext(ctx, getChapters, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chapter
	for rows.Next() {
		var i Chapter
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Number,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExeRange = `-- name: GetExeRange :many
SELECT number FROM exercises
WHERE chapter_id = ?
`

func (q *Queries) GetExeRange(ctx context.Context, chapterID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getExeRange, chapterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var number int64
		if err := rows.Scan(&number); err != nil {
			return nil, err
		}
		items = append(items, number)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExercises = `-- name: GetExercises :many
SELECT id, number, chapter_id FROM exercises
WHERE chapter_id = ?
`

func (q *Queries) GetExercises(ctx context.Context, chapterID int64) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getExercises, chapterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(&i.ID, &i.Number, &i.ChapterID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImages = `-- name: GetImages :many
SELECT file_name, sequence FROM images
WHERE ex_id = ?
`

type GetImagesRow struct {
	FileName string
	Sequence int64
}

func (q *Queries) GetImages(ctx context.Context, exID int64) ([]GetImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getImages, exID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImagesRow
	for rows.Next() {
		var i GetImagesRow
		if err := rows.Scan(&i.FileName, &i.Sequence); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBook = `-- name: InsertBook :one
INSERT INTO books (
    title, author, volume, edition, publisher, year
) VALUES (
    ?, ?, ?, ?, ?, ?
)
RETURNING id
`

type InsertBookParams struct {
	Title     string
	Author    string
	Volume    sql.NullString
	Edition   sql.NullString
	Publisher sql.NullString
	Year      string
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertBook,
		arg.Title,
		arg.Author,
		arg.Volume,
		arg.Edition,
		arg.Publisher,
		arg.Year,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertChapter = `-- name: InsertChapter :one
INSERT INTO chapters (
    book_id, number, name
) VALUES (
    ?, ?, ?
)
RETURNING id
`

type InsertChapterParams struct {
	BookID int64
	Number int64
	Name   string
}

func (q *Queries) InsertChapter(ctx context.Context, arg InsertChapterParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertChapter, arg.BookID, arg.Number, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertExercise = `-- name: InsertExercise :one
INSERT INTO exercises (
    number, chapter_id
) VALUES (
    ?, ?
)
RETURNING id
`

type InsertExerciseParams struct {
	Number    int64
	ChapterID int64
}

func (q *Queries) InsertExercise(ctx context.Context, arg InsertExerciseParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertExercise, arg.Number, arg.ChapterID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertImage = `-- name: InsertImage :exec
INSERT INTO images (
    ex_id, file_name, sequence
) VALUES (
    ?, ?, ?
)
`

type InsertImageParams struct {
	ExID     int64
	FileName string
	Sequence int64
}

func (q *Queries) InsertImage(ctx context.Context, arg InsertImageParams) error {
	_, err := q.db.ExecContext(ctx, insertImage, arg.ExID, arg.FileName, arg.Sequence)
	return err
}
